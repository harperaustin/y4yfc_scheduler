{"ast":null,"code":"var _jsxFileName = \"/Users/harperaustin/Desktop/y4yfc_scheduler/frontend/src/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  setPlayerInfo\n}) => {\n  _s();\n  // Set the number of rows and columns\n  const rows = 29;\n  const cols = 8;\n  // Generate the grid as an array of rectangles\n\n  const timeLabels = [\"8:00 AM\", \"8:30 AM\", \"9:00 AM\", \"9:30 AM\", \"10:00 AM\", \"10:30 AM\", \"11:00 AM\", \"11:30 AM\", \"12:00 PM\", \"12:30 PM\", \"1:00 PM\", \"1:30 PM\", \"2:00 PM\", \"2:30 PM\", \"3:00 PM\", \"3:30 PM\", \"4:00 PM\", \"4:30 PM\", \"5:00 PM\", \"5:30 PM\", \"6:00 PM\", \"6:30 PM\", \"7:00 PM\", \"7:30 PM\", \"8:00 PM\", \"8:30 PM\", \"9:00 PM\", \"9:00 PM\"];\n  const dayLabels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const [clickedRectangles, setClickedRectangles] = useState(Array(rows).fill(Array(cols).fill(false)));\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [initialDragState, setInitialDragState] = useState(null);\n  const isDragging = useRef(false);\n  const updateAvailability = () => {\n    const availability = {};\n    clickedRectangles.forEach((row, rowIndex) => {\n      row.forEach((isSelected, colIndex) => {\n        if (isSelected && rowIndex > 1 && colIndex > 0) {\n          const timeRange = findTimeRanges(rowIndex); // Helper function to get time\n          const day = dayLabels[(colIndex - 1 + currentDay) % 7];\n          const date = new Date(today);\n          date.setDate(today.getDate() + colIndex);\n          const fullDate = `${day} ${date.getMonth() + 1}/${date.getDate()}`;\n          if (!availability[fullDate]) {\n            availability[fullDate] = [];\n          }\n          availability[fullDate].push(timeRange);\n          // get the array of availability for the current day\n          const dayAvailability = availability[fullDate];\n          if (dayAvailability.length > 0) {\n            const lastRange = dayAvailability[dayAvailability.length - 1];\n          }\n        }\n      });\n    });\n    setPlayerInfo(prev => ({\n      ...prev,\n      // keep all the other fields the same\n      availability // update the availability\n    }));\n  };\n  const handleClick = (row, col) => {\n    if (row > 1 && col > 0) {\n      // Only handle clicks for the inner grid\n      setClickedRectangles(prev => {\n        const newRectangles = prev.map(row => [...row]); // Create a copy of the current state\n        newRectangles[row][col] = !newRectangles[row][col]; // Toggle clicked state\n        return newRectangles;\n      });\n    }\n    updateAvailability();\n  };\n  const handleMouseDown = (row, col) => {\n    setIsMouseDown(true);\n    setInitialDragState(clickedRectangles[row][col]);\n    isDragging.current = true;\n    handleClick(row, col); // Click the rectangle\n  };\n  const handleMouseEnter = (row, col) => {\n    if (isMouseDown) {\n      if (row > 1 && col > 0) {\n        setClickedRectangles(prev => {\n          const newRectangles = prev.map(r => [...r]); // Create a copy of the current state\n          newRectangles[row][col] = newRectangles[row][col] = !initialDragState; // Ensure this rectangle is green (selected)\n          return newRectangles;\n        });\n      }\n    }\n    updateAvailability();\n  };\n  const handleMouseUp = () => {\n    setIsMouseDown(false); // Release the mouse\n    isDragging.current = false;\n    updateAvailability();\n  };\n  const handleTouchStart = (row, col) => {\n    console.log(\"Touch Start: %d/%d\", row, col);\n    handleMouseDown(row, col); // Handle touch as mouse down\n  };\n  const handleTouchMove = event => {\n    const touch = event.touches[0];\n    const target = document.elementFromPoint(touch.clientX, touch.clientY);\n    if (target && target.classList.contains('rectangle')) {\n      const row = parseInt(target.getAttribute('data-row'), 10);\n      const col = parseInt(target.getAttribute('data-col'), 10);\n      console.log('row: %d, col: %d', row, col);\n      if (row < 29 && row > 0 && col < 8 && row > 1) {\n        handleMouseEnter(row, col);\n      }\n    }\n  };\n  const handleTouchEnd = event => {\n    event.preventDefault();\n    handleMouseUp(); // Release the touch\n  };\n  const today = new Date();\n  const currentDay = today.getDay();\n  useEffect(() => {\n    const handleDocumentMouseUp = () => {\n      setIsMouseDown(false);\n      isDragging.current = false;\n    };\n    document.addEventListener(\"mouseup\", handleDocumentMouseUp);\n    return () => {\n      document.removeEventListener(\"mouseup\", handleDocumentMouseUp);\n    };\n  }, []);\n  const findTimeRanges = row => {\n    if (row === 28) {\n      return `9:00 PM - 9:30PM`;\n    }\n    const start_time = timeLabels[row - 2];\n    const end_time = timeLabels[row - 1];\n    return `${start_time} - ${end_time}`;\n  };\n  const grid = Array.from({\n    length: rows * cols\n  }, (_, index) => {\n    const row = Math.floor(index / cols); // Calculate the row index\n    const col = index % cols; // Calculate the column index\n    const date = new Date(today);\n    date.setDate(today.getDate() + col);\n    let backgroundColor;\n    let borderTop;\n    let borderLeft;\n    let borderBottom;\n    let borderRight;\n    if (row === 0 || row === 1 || col === 0) {\n      backgroundColor = \"#d3d3d3\"; // Grey for first row and column\n      borderTop = \"1px solid #767676\";\n      borderLeft = \"1px solid #767676\";\n      borderBottom = \"1px solid #767676\";\n      borderRight = \"1px solid #767676\";\n    } else {\n      backgroundColor = clickedRectangles[row][col] ? \"#32d637\" : \"#FFFFFF\"; // White for other rectangles\n      borderTop = clickedRectangles[row][col] ? 'none' : \"1px solid #d3d3d3\";\n      borderLeft = clickedRectangles[row][col] ? '1px solid #000000' : \"1px solid #d3d3d3\";\n      borderRight = clickedRectangles[row][col] ? '1px solid #000000' : \"1px solid #d3d3d3\";\n      if (row > 2 && !clickedRectangles[row - 1][col] && clickedRectangles[row][col] || row === 2 && clickedRectangles[row][col] || row > 2 && !clickedRectangles[row][col] && clickedRectangles[row - 1][col]) {\n        borderTop = '1px solid #000000';\n      }\n      if (col > 1 && clickedRectangles[row][col - 1]) {\n        borderLeft = '1px solid #000000';\n      }\n      if (row === 32 && clickedRectangles[row][col]) {\n        borderBottom = \"1px solid #000000\";\n      }\n    }\n    const isClicked = clickedRectangles[row][col];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rectangle\",\n        style: {\n          backgroundColor,\n          borderTop,\n          borderLeft,\n          borderRight,\n          borderBottom\n        },\n        \"data-row\": row,\n        \"data-col\": col,\n        onMouseDown: () => handleMouseDown(row, col),\n        onMouseEnter: () => handleMouseEnter(row, col),\n        onMouseUp: handleMouseUp,\n        onTouchStart: () => handleTouchStart(row, col),\n        onTouchMove: handleTouchMove,\n        onTouchEnd: handleTouchEnd,\n        children: col === 0 && row > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"label\",\n          children: timeLabels[row - 2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this) || row === 0 && col !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"daylabel\",\n            children: dayLabels[(col - 1 + currentDay) % 7]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this) || row === 1 & col !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"daylabel\",\n            children: [\" \", date.toLocaleDateString(undefined, {\n              month: \"numeric\",\n              day: 'numeric'\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this) || isClicked && (row === 1 || row === 28 && !clickedRectangles[row - 1][col] || !clickedRectangles[row - 1][col] && !clickedRectangles[row + 1][col]) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timeLabel\",\n          children: findTimeRanges(row)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }, this) || isClicked && !clickedRectangles[row - 1][col] && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timeLabel\",\n          children: timeLabels[row - 2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this) || isClicked && (row === 28 || !clickedRectangles[row + 1][col]) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timeLabel\",\n          children: timeLabels[row - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calDiv\",\n    onMouseUp: handleMouseUp,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"+rKHnGW3RX6xt4ow8tunW0JV3p0=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Calendar","setPlayerInfo","_s","rows","cols","timeLabels","dayLabels","clickedRectangles","setClickedRectangles","Array","fill","isMouseDown","setIsMouseDown","initialDragState","setInitialDragState","isDragging","updateAvailability","availability","forEach","row","rowIndex","isSelected","colIndex","timeRange","findTimeRanges","day","currentDay","date","Date","today","setDate","getDate","fullDate","getMonth","push","dayAvailability","length","lastRange","prev","handleClick","col","newRectangles","map","handleMouseDown","current","handleMouseEnter","r","handleMouseUp","handleTouchStart","console","log","handleTouchMove","event","touch","touches","target","document","elementFromPoint","clientX","clientY","classList","contains","parseInt","getAttribute","handleTouchEnd","preventDefault","getDay","handleDocumentMouseUp","addEventListener","removeEventListener","start_time","end_time","grid","from","_","index","Math","floor","backgroundColor","borderTop","borderLeft","borderBottom","borderRight","isClicked","children","className","style","onMouseDown","onMouseEnter","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleDateString","undefined","month","_c","$RefreshReg$"],"sources":["/Users/harperaustin/Desktop/y4yfc_scheduler/frontend/src/calendar.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./styles.css\"; \n\nconst Calendar = ({ setPlayerInfo }) => {\n\n  // Set the number of rows and columns\n    const rows = 29;\n    const cols = 8;\n  // Generate the grid as an array of rectangles\n\n    const timeLabels = [\n        \"8:00 AM\", \"8:30 AM\",\n        \"9:00 AM\", \"9:30 AM\", \"10:00 AM\", \"10:30 AM\", \"11:00 AM\", \"11:30 AM\",\n        \"12:00 PM\", \"12:30 PM\", \"1:00 PM\", \"1:30 PM\", \"2:00 PM\", \"2:30 PM\",\n        \"3:00 PM\", \"3:30 PM\", \"4:00 PM\", \"4:30 PM\", \"5:00 PM\", \"5:30 PM\", \n        \"6:00 PM\", \"6:30 PM\", \"7:00 PM\", \"7:30 PM\", \"8:00 PM\", \"8:30 PM\",\n        \"9:00 PM\", \"9:00 PM\"\n    ]\n\n    const dayLabels = [\n        \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"\n    ]\n\n    const [clickedRectangles, setClickedRectangles] = useState(Array(rows).fill(Array(cols).fill(false)));\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [initialDragState, setInitialDragState] = useState(null);\n    const isDragging = useRef(false);\n\n    const updateAvailability = () => {\n        const availability = {};\n        clickedRectangles.forEach((row, rowIndex) => {\n            row.forEach((isSelected, colIndex) => {\n                if (isSelected && rowIndex > 1 && colIndex > 0) {\n                    const timeRange = findTimeRanges(rowIndex); // Helper function to get time\n                    const day = dayLabels[(colIndex - 1 + currentDay) % 7];\n                    const date = new Date(today)\n                    date.setDate(today.getDate() + (colIndex))\n                    const fullDate = `${day} ${date.getMonth() + 1}/${date.getDate()}`;\n                    if (!availability[fullDate]){\n                        availability[fullDate] = [];\n                    }\n\n                    availability[fullDate].push(timeRange);\n                    // get the array of availability for the current day\n                    const dayAvailability = availability[fullDate];\n                    if (dayAvailability.length > 0){\n                        const lastRange = dayAvailability[dayAvailability.length - 1];\n                        \n                    }\n                }\n            });\n            \n        });\n\n        setPlayerInfo((prev) => ({\n            ...prev, // keep all the other fields the same\n            availability // update the availability\n        }));\n    }\n\n    const handleClick = (row, col) => {\n        if (row > 1 && col > 0) { // Only handle clicks for the inner grid\n            setClickedRectangles(prev => {\n                const newRectangles = prev.map(row => [...row]); // Create a copy of the current state\n                newRectangles[row][col] = !newRectangles[row][col]; // Toggle clicked state\n                return newRectangles;\n            });\n        }\n        updateAvailability();\n    };\n\n    const handleMouseDown = (row, col) => {\n        setIsMouseDown(true);\n        setInitialDragState(clickedRectangles[row][col]);\n        isDragging.current = true;\n        handleClick(row, col); // Click the rectangle\n    };\n    \n    const handleMouseEnter = (row, col) => {\n        if (isMouseDown) {\n            if (row > 1 && col > 0) {\n                setClickedRectangles(prev => {\n                const newRectangles = prev.map(r => [...r]); // Create a copy of the current state\n                newRectangles[row][col] = newRectangles[row][col] = !initialDragState; // Ensure this rectangle is green (selected)\n                return newRectangles;\n        });\n        }\n        }\n        updateAvailability();\n    };\n    \n    const handleMouseUp = () => {\n        setIsMouseDown(false); // Release the mouse\n        isDragging.current = false;\n        updateAvailability();\n    };\n\n    const handleTouchStart = (row, col) =>  {\n        console.log(\"Touch Start: %d/%d\", row, col)\n        handleMouseDown(row, col); // Handle touch as mouse down\n    };\n\n    const handleTouchMove = (event) => {\n        const touch = event.touches[0];\n        const target = document.elementFromPoint(touch.clientX, touch.clientY);\n        if (target && target.classList.contains('rectangle')) {\n            const row = parseInt(target.getAttribute('data-row'), 10);\n            const col = parseInt(target.getAttribute('data-col'), 10);\n            console.log('row: %d, col: %d', row, col)\n            if (row < 29 && row > 0 && col < 8 && row > 1) {\n                handleMouseEnter(row, col);\n            }\n        }\n    };\n\n    \n    const handleTouchEnd = (event) => {\n        event.preventDefault();\n        handleMouseUp(); // Release the touch\n    };\n\n    const today = new Date();\n    const currentDay = today.getDay();\n\n    useEffect(() => {\n        const handleDocumentMouseUp = () => {\n            setIsMouseDown(false);\n            isDragging.current = false;\n        };\n    \n        document.addEventListener(\"mouseup\", handleDocumentMouseUp);\n    \n        return () => {\n            document.removeEventListener(\"mouseup\", handleDocumentMouseUp);\n        };\n    }, []);\n\n    const findTimeRanges = (row) => {\n        if (row === 28){\n            return `9:00 PM - 9:30PM`\n        }\n        const start_time = timeLabels[row - 2];\n        const end_time = timeLabels[row - 1]\n        \n        return `${start_time} - ${end_time}`;\n    }\n\n\n\n  const grid = Array.from({ length: rows * cols }, (_, index) => {\n    const row = Math.floor(index / cols);  // Calculate the row index\n    const col = index % cols;              // Calculate the column index\n    const date = new Date(today)\n    date.setDate(today.getDate() + (col))\n\n    let backgroundColor;\n    let borderTop;\n    let borderLeft;\n    let borderBottom;\n    let borderRight;\n    if (row === 0 || row === 1 || col === 0) {\n        backgroundColor = \"#d3d3d3\"; // Grey for first row and column\n        borderTop = \"1px solid #767676\"\n        borderLeft = \"1px solid #767676\"\n        borderBottom = \"1px solid #767676\"\n        borderRight = \"1px solid #767676\"\n    } else {\n        backgroundColor = clickedRectangles[row][col] ? \"#32d637\" : \"#FFFFFF\"; // White for other rectangles\n        borderTop = clickedRectangles[row][col] ? 'none' : \"1px solid #d3d3d3\";\n        borderLeft = clickedRectangles[row][col] ? '1px solid #000000' : \"1px solid #d3d3d3\";\n        borderRight = clickedRectangles[row][col] ? '1px solid #000000' : \"1px solid #d3d3d3\";\n        if ((row > 2 && !clickedRectangles[row - 1][col] && clickedRectangles[row][col]) || (row === 2 && clickedRectangles[row][col]) || \n        (row > 2 && !clickedRectangles[row][col] && clickedRectangles[row - 1][col])){\n            borderTop = '1px solid #000000';\n        }\n        if (col > 1 && clickedRectangles[row][col - 1]){\n            borderLeft = '1px solid #000000';\n        }\n        if (row === 32 && clickedRectangles[row][col]){\n            borderBottom = \"1px solid #000000\"\n        }\n    }\n    \n\n    const isClicked = clickedRectangles[row][col];\n\n\n\n    return (\n    <div>\n    <div key={index}\n    className=\"rectangle\" \n    style={{backgroundColor, borderTop, borderLeft, borderRight, borderBottom}} \n\n    data-row={row}\n    data-col={col}\n\n    onMouseDown={() => handleMouseDown(row, col)}\n    onMouseEnter={() => handleMouseEnter(row,col)}\n    onMouseUp={handleMouseUp}\n    onTouchStart={() => handleTouchStart(row, col)}\n    onTouchMove={handleTouchMove}\n    onTouchEnd={handleTouchEnd}\n    > \n        {((col === 0 && row > 1) && (\n            <span className=\"label\">{timeLabels[row - 2]}</span>\n        )) || ((row === 0 && col !== 0) && (\n            <div>\n                <span className=\"daylabel\">{dayLabels[(col - 1 + currentDay) % 7]}</span>\n            </div>\n            )) || ((row === 1 & col !== 0) && (\n                <div>\n                    <span className=\"daylabel\"> {date.toLocaleDateString(undefined, {month:\"numeric\", day: 'numeric'})} </span>\n                </div>\n            )) || (isClicked && ((row === 1 || (row === 28 && !clickedRectangles[row - 1][col]) ||  (!clickedRectangles[row - 1][col] && !clickedRectangles[row + 1][col]))  && (\n                <span className=\"timeLabel\">{findTimeRanges(row)}</span> \n            ))) || ((isClicked && !clickedRectangles[row - 1][col]) && (\n                <span className=\"timeLabel\">{timeLabels[row-2]}</span> \n            )) || ((isClicked && (row === 28 || !clickedRectangles[row + 1][col])) && (\n                <span className=\"timeLabel\">{timeLabels[row-1]}</span> \n            ))\n        }\n    </div>\n    </div>\n    );\n});\n\n    return (\n    <div className=\"calDiv\" onMouseUp={handleMouseUp}>\n        <div className=\"grid-container\">{grid}</div>\n    </div>)\n};\n\nexport default Calendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}